AWSTemplateFormatVersion: "2010-09-09"
Description: "lambda in vpc with vpc endpoints"
Resources:
  AppPolicy:
    Type: AWS::ResilienceHub::ResiliencyPolicy
    Properties:
      DataLocationConstraint: AnyLocation
      Policy:
        Software:
          RpoInSecs: 300
          RtoInSecs: 3600
        Hardware:
          RpoInSecs: 300
          RtoInSecs: 300
        AZ:
          RpoInSecs: 300
          RtoInSecs: 300
        Region:
          RpoInSecs: 300
          RtoInSecs: 900
      PolicyDescription: "Global Mission Critical"
      PolicyName: GlobalMissionCritical
      Tier: MissionCritical
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: "Lamba vpc"
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.1.0.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Subnet AZ A"
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: "AWS::Region"
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.1.1.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Subnet AZ B"
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: "AWS::Region"
  PrivateSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.1.2.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Subnet AZ C"
      AvailabilityZone:
        Fn::Select:
          - "2"
          - Fn::GetAZs:
              Ref: "AWS::Region"
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  InboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '700'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'
  InboundDenyRdpPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '70'
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '3389'
        To: '3389'
  OutboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '800'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '443'
        To: '443'
  PrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      NetworkAclId: !Ref 'PrivateNetworkAcl'
  PrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      NetworkAclId: !Ref 'PrivateNetworkAcl'
  PrivateSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3'
      NetworkAclId: !Ref 'PrivateNetworkAcl'
  RouteTablePrivate1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Route Table A"
  RouteTablePrivate1Association1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate1"
      SubnetId:
        Ref: "PrivateSubnet1"
  RouteTablePrivate2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Route Table B"
  RouteTablePrivate2Association1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate2"
      SubnetId:
        Ref: "PrivateSubnet2"
  RouteTablePrivate3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Route Table C"
  RouteTablePrivate3Association1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate3"
      SubnetId:
        Ref: "PrivateSubnet3"
  EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used for for stack
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Sid: manage-key-stack
            Action:
              - kms:*
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/GithubWorkFlowRole'
            Resource: '*'
          - Sid: manage-key-root
            Action:
              - kms:*
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
          - Sid: logs-access-policy-statement
            Action:
              - kms:*
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Resource: '*'
          - Sid: route53-access-policy-statement
            Action:
              - kms:*
            Effect: Allow
            Principal:
              Service: route53.amazonaws.com
            Resource: '*'
  Route53QueryLoggingGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      KmsKeyId: !GetAtt "EncryptionKey.Arn"
      RetentionInDays: 30
  Route53QueryLoggingConfig:
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfig"
    Properties:
      DestinationArn:
        !GetAtt "Route53QueryLoggingGroup.Arn"
  Route53QueryLoggingConfigAssociation:
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"
    Properties:
      ResolverQueryLogConfigId:
        Fn::GetAtt:
          - "Route53QueryLoggingConfig"
          - "Id"
      ResourceId:
        Ref: "VPC"
  FlowLogs:
    Type: "AWS::EC2::FlowLog"
    Properties:
      ResourceType: "VPC"
      ResourceId:
        Ref: "VPC"
      TrafficType: "ALL"
      LogDestinationType: "cloud-watch-logs"
      LogGroupName: "vpcprivate"
      DeliverLogsPermissionArn:
        Fn::GetAtt:
          - "IamRoleForFlowLogs"
          - "Arn"
  IamRoleForFlowLogs:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      ServiceName:
        Fn::Join:
          - ""
          -
            - "com.amazonaws."
            - Ref: "AWS::Region"
            - ".ec2"
      VpcId:
        Ref: "VPC"
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Ref: "SgForVPCEndpoint"
      SubnetIds:
        - !Ref "PrivateSubnet1"
        - !Ref "PrivateSubnet2"
        - !Ref "PrivateSubnet3"       
  SgForVPCEndpoint:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group to allow access to ec2 VPC Endpoint"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref "LambdaSecurityGroup"
          IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          Description: "Allow inbound https from inside vpc"
      SecurityGroupEgress:
        - CidrIp: "10.1.0.0/16"
          IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          Description: "Allow outbound https inside vpc"
      VpcId:
        Ref: "VPC"
  VPCEndpointS3:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          -
            - "com.amazonaws."
            - Ref: "AWS::Region"
            - ".s3"
      VpcId:
        Ref: "VPC"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action:
              - "*"
            Resource:
              - "*"
      RouteTableIds:
        - Ref: "RouteTablePrivate1"
        - Ref: "RouteTablePrivate2"
        - Ref: "RouteTablePrivate3"     
  VPCEndpointDynamoDb:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          -
            - "com.amazonaws."
            - Ref: "AWS::Region"
            - ".dynamodb"
      VpcId:
        Ref: "VPC"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "dynamodb:ListTables"
            Resource:
              - "todo"
      RouteTableIds:
        - Ref: "RouteTablePrivate1"
        - Ref: "RouteTablePrivate2"
        - Ref: "RouteTablePrivate3"
  LambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Lambda Traffic"
      VpcId: !Ref "VPC"
      SecurityGroupEgress:
      - IpProtocol: "tcp"
        FromPort: "443"
        ToPort: "443"
        CidrIp: "10.1.0.0/16"
        Description: "Allow outbound https inside vpc"
  InstanceSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref "LambdaSecurityGroup"
      IpProtocol: "tcp"
      FromPort: "443"
      ToPort: "443"
      Description: "Allow inbound https"
      SourceSecurityGroupId: !Ref "LambdaSecurityGroup"
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
      - "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
      - "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
      - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
  DeadLetterTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: 'admin@hack23.com'
          Protocol: email
      KmsMasterKeyId: alias/aws/sns
  Lambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.info("EVENT\n" + JSON.stringify(event, null, 2));
            return "OK";
          }
      Description: "lambda"
      FunctionName: audittest
      Handler: index.handler
      Architectures:
        - arm64
      MemorySize: 256
      ReservedConcurrentExecutions: 1
      DeadLetterConfig:
        TargetArn: !Ref "DeadLetterTopic"
      PackageType: "Zip"
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: "nodejs18.x"
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref "LambdaSecurityGroup"
        SubnetIds:
          - !Ref "PrivateSubnet1"
          - !Ref "PrivateSubnet2"
          - !Ref "PrivateSubnet3"
Parameters: {}
Metadata: {}
Conditions: {}