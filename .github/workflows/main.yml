name: Verify and Deploy
on:
  pull_request_target:
    types:
      - closed
permissions:
  checks: write
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
env:
  AWS_REGION : "eu-west-1"
  AWS_REGION_ZONE : "eu-central-1"  
jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@03bee3930647ebbf994244c21ddbc0d4933aab4f # v2.3.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - name: Checkout
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - name: Run StandardLint
        uses: mikaelvesavuori/standardlint-action@6aa06559941f5dda07f7d89eefff6da591e9e0b9 # v1.0.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Testing with CFN Lint Command
        uses: scottbrenner/cfn-lint-action@d4b491a1ac58da9e28f5aaeda243c2debe491624 # v2.3.0
        with:
          command: cfn-lint -t cloudformation/template.yml
      - name: Testing route53 with CFN Lint
        uses: scottbrenner/cfn-lint-action@d4b491a1ac58da9e28f5aaeda243c2debe491624 # v2.3.0
        with:
          command: cfn-lint -t cloudformation/route53.yml
      - name: Testing disaster-recovery with CFN Lint
        uses: scottbrenner/cfn-lint-action@d4b491a1ac58da9e28f5aaeda243c2debe491624 # v2.3.0
        with:
          command: cfn-lint -t cloudformation/disaster-recovery.yml
      - name: Run cfn-nag
        uses: stelligent/cfn_nag@8b5f03da74202ba323a145e9d037ddce6cab9dec # master
        with:
          input_path: cloudformation
      - name: Testing app with CFN Lint
        uses: scottbrenner/cfn-lint-action@d4b491a1ac58da9e28f5aaeda243c2debe491624 # v2.3.0
        with:
          command: cfn-lint -t cloudformation/app.yml
      - name: Run cfn-nag
        uses: stelligent/cfn_nag@8b5f03da74202ba323a145e9d037ddce6cab9dec # master
        with:
          input_path: cloudformation
      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@28f996072c5e38b2083293a8162907dc39ef7315 # master
        with:
          file: cloudformation/template.yml
          skip_check: CKV_AWS_59
          framework: cloudformation
          output_format: sarif
          output_file_path: reports/results.sarif 
          download_external_modules: true
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          role-to-assume: arn:aws:iam::172017021075:role/GithubWorkFlowRole
          role-session-name: githubworkflowrolesessiont2
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy to AWS CloudFormation Irland
        uses: aws-actions/aws-cloudformation-github-deploy@023f4ef60d0103d690f31a504cfda9f4f2d66265 # v1
        with:
          name: lambda-vpc
          template: cloudformation/template.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "DomainNamePrefix=api"
      - name: Get Output Irland
        run: |
            GlobalTableZoneFrankfurt=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'GlobalTableZoneFrankfurt'].OutputValue" | grep arn | xargs`
            echo "GlobalTableZoneFrankfurt=$GlobalTableZoneFrankfurt"  >> $GITHUB_ENV
            HealthCheckId=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'HealthCheckId'].OutputValue" | grep -v '\[' | grep -v '\]' | xargs`
            echo "HealthCheckId=$HealthCheckId"  >> $GITHUB_ENV
            AliasTargetHostedZoneId=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'AliasTargetHostedZoneId'].OutputValue" | grep -v '\[' | grep -v '\]' | xargs`
            echo "AliasTargetHostedZoneId=$AliasTargetHostedZoneId"  >> $GITHUB_ENV 
            RestApi=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'RestApi'].OutputValue" | grep aws | xargs`
            echo "RestApi=$RestApi"  >> $GITHUB_ENV
            HealthcheckFunction=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'HealthcheckFunction'].OutputValue" | grep aws | xargs`
            echo "HealthcheckFunction=$HealthcheckFunction"  >> $GITHUB_ENV
            DynamoFunction=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'DynamoFunction'].OutputValue" | grep aws | xargs`
            echo "DynamoFunction=$DynamoFunction"  >> $GITHUB_ENV
            DeadletterTopic=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'DeadletterTopic'].OutputValue" | grep aws | xargs`
            echo "DeadletterTopic=$DeadletterTopic"  >> $GITHUB_ENV            
            AlarmTopic=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'AlarmTopic'].OutputValue" | grep aws | xargs`
            echo "AlarmTopic=$AlarmTopic"  >> $GITHUB_ENV
            StackId=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'StackId'].OutputValue" | grep aws | xargs`
            echo "StackId=$StackId"  >> $GITHUB_ENV
      - name: Show Output Irland
        run: |
            echo "${{ env.GlobalTableZoneFrankfurt }}"
            echo "${{ env.HealthCheckId }}"
            echo "${{ env.AliasTargetHostedZoneId }}"
            echo "${{ env.AliasTargetDNSName }}"            
      - name: configure aws credentials Frankfurt region
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          role-to-assume: arn:aws:iam::172017021075:role/GithubWorkFlowRole
          role-session-name: githubworkflowrolesessiont2
          aws-region: ${{ env.AWS_REGION_ZONE }}

      - name: Deploy to AWS CloudFormation Frankfurt
        uses: aws-actions/aws-cloudformation-github-deploy@023f4ef60d0103d690f31a504cfda9f4f2d66265 # v1
        with:
          name: lambda-vpc
          template: cloudformation/template.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "DomainNamePrefix=api,GlobalTableArn=${{ env.GlobalTableZoneFrankfurt }}"
      - name: Get Output Frankfurt
        run: |
            HealthCheckId=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'HealthCheckId'].OutputValue" | grep -v '\[' | grep -v '\]' | xargs`
            echo "HealthCheckId2=$HealthCheckId"  >> $GITHUB_ENV
            AliasTargetHostedZoneId=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'AliasTargetHostedZoneId'].OutputValue" | grep -v '\[' | grep -v '\]' | xargs`
            echo "AliasTargetHostedZoneId2=$AliasTargetHostedZoneId"  >> $GITHUB_ENV
            AliasTargetDNSName=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'AliasTargetDNSName'].OutputValue" | grep aws | xargs`
            echo "AliasTargetDNSName2=$AliasTargetDNSName"  >> $GITHUB_ENV
            ApiRoleName=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'ApiRoleName'].OutputValue" | grep -v '\[' | grep -v '\]' | xargs`
            echo "ApiRoleName=$ApiRoleName"  >> $GITHUB_ENV
            RestApi=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'RestApi'].OutputValue" | grep aws | xargs`
            echo "RestAp2i=$RestApi"  >> $GITHUB_ENV
            HealthcheckFunction=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'HealthcheckFunction'].OutputValue" | grep aws | xargs`
            echo "HealthcheckFunction2=$HealthcheckFunction"  >> $GITHUB_ENV
            DynamoFunction=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'DynamoFunction'].OutputValue" | grep aws | xargs`
            echo "DynamoFunction2=$DynamoFunction"  >> $GITHUB_ENV
            DeadletterTopic=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'DeadletterTopic'].OutputValue" | grep aws | xargs`
            echo "DeadletterTopic2=$DeadletterTopic"  >> $GITHUB_ENV            
            AlarmTopic=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'AlarmTopic'].OutputValue" | grep aws | xargs`
            echo "AlarmTopic2=$AlarmTopic"  >> $GITHUB_ENV
            StackId=`aws cloudformation describe-stacks --stack-name lambda-vpc --query "Stacks[0].Outputs[?OutputKey == 'StackId'].OutputValue" | grep aws | xargs`
            echo "StackId2=$StackId"  >> $GITHUB_ENV
      - name: Show Output Irland
        run: |
            echo "${{ env.HealthCheckId }}"
            echo "${{ env.AliasTargetHostedZoneId }}"
            echo "${{ env.AliasTargetDNSName }}"            
      - name: Deploy to AWS CloudFormation Route53
        uses: aws-actions/aws-cloudformation-github-deploy@023f4ef60d0103d690f31a504cfda9f4f2d66265 # v1
        with:
          name: lambda-vpc-route53
          template: cloudformation/route53.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "DomainNamePrefix=api,HealthCheckId=${{ env.HealthCheckId }},RestApiDomainNameRegionalHostedZoneId=${{ env.AliasTargetHostedZoneId }},RestApiDomainNameRegionalDomainName=${{ env.AliasTargetDNSName }},HealthCheckId2=${{ env.HealthCheckId2 }},RestApiDomainNameRegionalHostedZoneId2=${{ env.AliasTargetHostedZoneId2 }},RestApiDomainNameRegionalDomainName2=${{ env.AliasTargetDNSName2 }}"          
      - name: Deploy to AWS CloudFormation Disaster Recovery
        uses: aws-actions/aws-cloudformation-github-deploy@023f4ef60d0103d690f31a504cfda9f4f2d66265 # v1
        with:
          name: lambda-vpc-disaster-recovery
          template: cloudformation/disaster-recovery.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "ApiRole=${{ env.ApiRoleName }}"
      - name: Deploy to AWS CloudFormation Resilience hub App and Policy
        uses: aws-actions/aws-cloudformation-github-deploy@023f4ef60d0103d690f31a504cfda9f4f2d66265 # v1
        with:
          name: lambda-vpc-resiliencehub-app
          template: cloudformation/app.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "StackIrland=${{ env.StackId }},StackFrankfurt=${{ env.StackId2 }},RestApIrland=${{ env.RestAp }},RestApiFrankfurt=${{ env.RestApi2 }},HealthcheckFunctionIrland=${{ env.HealthcheckFunction }},HealthcheckFunctionFrankfurt=${{ env.HealthcheckFunctionFrankfurt2 }},DynamoFunctionIrland=${{ env.DynamoFunction }},DynamoFunctionFrankfurt=${{ env.DynamoFunction2 }},DeadLetterTopicIrland=${{ env.DeadLetterTopic }},DeadLetterTopicFrankfurt=${{ env.DeadLetterTopic2 }},AlarmTopicIrland=${{ env.AlarmTopic }},AlarmTopicFrankfurt=${{ env.AlarmTopic2 }}"
